package timsitu.pages.reservasi;

import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import timsitu.events.TableActionEvent;
import timsitu.models.Jadwal;
import timsitu.models.Pasien;
import timsitu.models.Poliklinik;
import timsitu.models.Reservasi;
import timsitu.models.SingleActionButtonEditor;
import timsitu.models.SingleActionButtonRender;

public class ReservasiByAdminPage extends javax.swing.JPanel {
    
    ArrayList<Jadwal> dataJadwal;
    ArrayList<Poliklinik> dataPoli;
    Pasien pasien = null;

    public ReservasiByAdminPage() {
        
        initComponents();
        
        spTable.getVerticalScrollBar().setBackground(Color.WHITE);
        spTable.getViewport().setBackground(Color.WHITE);
        JPanel p = new JPanel();
        p.setBackground(Color.WHITE);
        spTable.setCorner(JScrollPane.UPPER_RIGHT_CORNER, p);
        
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {}

            @Override
            public void onDelete(int row) {}

            @Override
            public void onClick(int row) {
                if(pasien != null){
                    String kode = Reservasi.generateKode();
                    Jadwal jadwal = dataJadwal.get(row);
                    Date currentDate = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String tanggal = sdf.format(currentDate);
                    int noAntrian = Reservasi.generateNoAntrian();
                    
                    Reservasi reservasi = new Reservasi(kode, pasien, jadwal, noAntrian, tanggal);
                    
                    int choice = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin melakukan pemeriksaan dengan jadwal dokter ini?", "Konfirmasi Reservasi", JOptionPane.YES_NO_OPTION);

                    if (choice == JOptionPane.YES_OPTION) {
                        try {
                            reservasi.simpanData();

                            JOptionPane.showMessageDialog(null, "Reservasi Berhasil. No Antrian Anda : " + reservasi.getNoAntrian());
                            
                            
                            txtKodePasien.setText(null);
                            taDetailPasien.setText(null);

                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Reservasi Gagal. Terjadi Kesalahan SIstem");
                        }
                    }  
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Data Pasien Tidak Boleh Kosong...");
                }
                
                DefaultTableModel tableModel;
                            tableModel = (DefaultTableModel)tblJadwalDokter.getModel();
                            tableModel.getDataVector().removeAllElements();
            }
        };
        
        tblJadwalDokter.getColumnModel().getColumn(6).setCellRenderer(new SingleActionButtonRender("Reservasi"));
        tblJadwalDokter.getColumnModel().getColumn(6).setCellEditor(new SingleActionButtonEditor(event, "Reservasi"));
        
        showDataPoli();
    }
    
    private void showJadwalDokter(String kodePoli){
        DefaultTableModel tableModel;
        tableModel = (DefaultTableModel)tblJadwalDokter.getModel();
        tableModel.getDataVector().removeAllElements();
        
        dataJadwal = Jadwal.getAllData(kodePoli);
        
        int no = 1;
        
        if(dataJadwal != null){
            for (Jadwal jadwal : dataJadwal) {
                tableModel.addRow(new Object[]{
                    no++,
                    jadwal.getKode(),
                    jadwal.getDokter().getNama(),
                    jadwal.getDokter().getJenisKelamin().toString(),
                    jadwal.getJam_mulai(),
                    jadwal.getJam_selesai()
                });
            }  
        }else{
            JOptionPane.showMessageDialog(null, "Jadwal Dokter Tidak Tersedia...");
        }
    }
    
    private void showDataPoli(){
        dataPoli = Poliklinik.getAllData();
        cbSpesialis.removeAllItems();
        
        for (Poliklinik poliklinik : dataPoli) {
            cbSpesialis.addItem(poliklinik.getNama_poli());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder2 = new timsitu.customs.PanelBorder();
        jLabel1 = new javax.swing.JLabel();
        txtKodePasien = new javax.swing.JTextField();
        btnCariPasien = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDetailPasien = new javax.swing.JTextArea();
        panelBorder1 = new timsitu.customs.PanelBorder();
        jLabel2 = new javax.swing.JLabel();
        cbSpesialis = new javax.swing.JComboBox<>();
        btnCariDokter = new javax.swing.JButton();
        panelBorder3 = new timsitu.customs.PanelBorder();
        spTable = new javax.swing.JScrollPane();
        tblJadwalDokter = new timsitu.customs.Table();

        setPreferredSize(new java.awt.Dimension(829, 508));

        panelBorder2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("ID Pasien :");

        btnCariPasien.setText("V");
        btnCariPasien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariPasienActionPerformed(evt);
            }
        });

        taDetailPasien.setEditable(false);
        taDetailPasien.setBackground(new java.awt.Color(255, 255, 255));
        taDetailPasien.setColumns(20);
        taDetailPasien.setRows(5);
        jScrollPane1.setViewportView(taDetailPasien);

        javax.swing.GroupLayout panelBorder2Layout = new javax.swing.GroupLayout(panelBorder2);
        panelBorder2.setLayout(panelBorder2Layout);
        panelBorder2Layout.setHorizontalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBorder2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtKodePasien, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCariPasien, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelBorder2Layout.setVerticalGroup(
            panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelBorder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtKodePasien, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCariPasien, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Pilih Spesialis");

        btnCariDokter.setBackground(new java.awt.Color(0, 141, 218));
        btnCariDokter.setForeground(new java.awt.Color(255, 255, 255));
        btnCariDokter.setText("Cari Dokter");
        btnCariDokter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnCariDokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariDokterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(btnCariDokter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbSpesialis, 0, 325, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbSpesialis, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnCariDokter, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        panelBorder3.setBackground(new java.awt.Color(255, 255, 255));

        spTable.setBorder(null);

        tblJadwalDokter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Kode", "Nama Dokter", "Jenis Kelamin", "Jam Mulai", "Jam Selesai", "Aksi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTable.setViewportView(tblJadwalDokter);

        javax.swing.GroupLayout panelBorder3Layout = new javax.swing.GroupLayout(panelBorder3);
        panelBorder3.setLayout(panelBorder3Layout);
        panelBorder3Layout.setHorizontalGroup(
            panelBorder3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder3Layout.setVerticalGroup(
            panelBorder3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panelBorder3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBorder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(panelBorder3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCariDokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariDokterActionPerformed
        // TODO add your handling code here:
        showJadwalDokter(dataPoli.get(cbSpesialis.getSelectedIndex()).getKode());
    }//GEN-LAST:event_btnCariDokterActionPerformed

    private void btnCariPasienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariPasienActionPerformed
        if(!txtKodePasien.equals(null)){
            pasien = Pasien.cariData(txtKodePasien.getText());
            
            if(pasien != null){
                taDetailPasien.setText(
                    "Nama            : " + pasien.getNama() + "\n" +
                    "Tanggal Lahir : " + pasien.getTanggalLahir() + "\n" +
                    "No Hp           : " + pasien.getNoHp() + "\n" +
                    "Jenis Kelamin : " + pasien.getJenisKelamin().toString() + "\n" +
                    "Alamat          : " + pasien.getAlamat()
                );
            }else{
                taDetailPasien.setText("*Data Pasien Tidak Ditemukan...");
            }
            
        }
    }//GEN-LAST:event_btnCariPasienActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCariDokter;
    private javax.swing.JButton btnCariPasien;
    private javax.swing.JComboBox<String> cbSpesialis;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private timsitu.customs.PanelBorder panelBorder1;
    private timsitu.customs.PanelBorder panelBorder2;
    private timsitu.customs.PanelBorder panelBorder3;
    private javax.swing.JScrollPane spTable;
    private javax.swing.JTextArea taDetailPasien;
    private timsitu.customs.Table tblJadwalDokter;
    private javax.swing.JTextField txtKodePasien;
    // End of variables declaration//GEN-END:variables
}
